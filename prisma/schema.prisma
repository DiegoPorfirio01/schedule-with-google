generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "sessions_userId_fkey")

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "sessions_user_fkey")

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id                     String             @id @default(cuid())
  name                   String?
  email                  String?            @unique
  bio                    String?
  username               String?            @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime           @default(now()) @map("created_at")
  updatedAt              DateTime           @default(now()) @map("updated_at")
  stripeCurrentPeriodEnd DateTime?          @map("stripe_current_period_end")
  stripeCustomerId       String?            @unique @map("stripe_customer_id")
  stripePriceId          String?            @map("stripe_price_id")
  stripeSubscriptionId   String?            @unique @map("stripe_subscription_id")
  accounts               Account[]
  Post                   Post[]
  sessions               Session[]
  timeInterval           UserTimeInterval[]
  schedullings           Scheduling[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], map: "posts_author_relation")

  @@index([authorId], map: "posts_authorId_fkey")
  @@map("posts")
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  user                  User   @relation(fields: [userId], references: [id])
  userId                String

  @@map("user_time_intervals")
}

model Scheduling {
  id           String   @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @map("user_id")

  @@map("schedulings")
}
